"""Initial revision

Revision ID: de1f33c9797c
Revises: 
Create Date: 2025-08-27 01:55:34.121141

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'de1f33c9797c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('analytics',
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.Text(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('key', 'recorded_at')
    )
    op.create_table('exchange_rates',
    sa.Column('id_rate', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('rate_rub', sa.Float(), nullable=False),
    sa.Column('source', sa.String(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id_rate')
    )
    op.create_index(op.f('ix_exchange_rates_recorded_at'), 'exchange_rates', ['recorded_at'], unique=False)
    op.create_table('products',
    sa.Column('id_product', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price_rub', sa.Float(), nullable=False),
    sa.Column('original_price_yuan', sa.Float(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('taobao_url', sa.String(), nullable=False),
    sa.Column('taobao_item_id', sa.String(), nullable=False),
    sa.Column('image_urls', sa.Text(), nullable=True),
    sa.Column('attributes', sa.Text(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('price_rub > 0'),
    sa.PrimaryKeyConstraint('id_product')
    )
    op.create_index(op.f('ix_products_category'), 'products', ['category'], unique=False)
    op.create_index(op.f('ix_products_name'), 'products', ['name'], unique=False)
    op.create_index(op.f('ix_products_taobao_item_id'), 'products', ['taobao_item_id'], unique=True)
    op.create_table('suppliers',
    sa.Column('id_supplier', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('platform', sa.String(), nullable=False),
    sa.Column('contact_info', sa.Text(), nullable=False),
    sa.Column('min_order_value', sa.Float(), nullable=False),
    sa.Column('shipping_method', sa.Text(), nullable=True),
    sa.Column('avg_delivery_days', sa.Integer(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('active IN (0, 1)'),
    sa.PrimaryKeyConstraint('id_supplier')
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('telegram_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('delivery_address', sa.Text(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=False),
    sa.Column('language', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    op.create_table('cart',
    sa.Column('id_cart', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_customer', sa.Integer(), nullable=False),
    sa.Column('id_product', sa.Integer(), nullable=True),
    sa.Column('size', sa.String(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('added_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint('quantity >= 1 AND quantity <= 10'),
    sa.ForeignKeyConstraint(['id_customer'], ['users.user_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_product'], ['products.id_product'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id_cart'),
    sa.UniqueConstraint('id_customer', 'id_product', 'size', 'color', name='uq_cart_item')
    )
    op.create_index(op.f('ix_cart_id_customer'), 'cart', ['id_customer'], unique=False)
    op.create_table('orders',
    sa.Column('id_order', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_customer', sa.Integer(), nullable=False),
    sa.Column('total_amount_rub', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('order_date', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('payment_status', sa.String(), nullable=False),
    sa.Column('payment_method', sa.String(), nullable=False),
    sa.Column('delivery_address', sa.Text(), nullable=False),
    sa.Column('tracking_number', sa.String(), nullable=False),
    sa.Column('admin_note', sa.Text(), nullable=True),
    sa.Column('exchange_rate_used', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("payment_status IN ('unpaid', 'paid', 'refunded')"),
    sa.CheckConstraint("status IN ('pending', 'confirmed', 'paid', 'processing_supplier', 'shipped', 'delivered', 'cancelled')"),
    sa.ForeignKeyConstraint(['id_customer'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_order')
    )
    op.create_index(op.f('ix_orders_id_customer'), 'orders', ['id_customer'], unique=False)
    op.create_index(op.f('ix_orders_order_date'), 'orders', ['order_date'], unique=False)
    op.create_index(op.f('ix_orders_payment_status'), 'orders', ['payment_status'], unique=False)
    op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id_session', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_customer', sa.Integer(), nullable=False),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('results_json', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text("(datetime('now', 'localtime'))"), nullable=False),
    sa.Column('expires_at', sa.DateTime(), server_default=sa.text("(datetime('now', '+1 hour'))"), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.CheckConstraint("status IN ('active', 'completed', 'expired')"),
    sa.ForeignKeyConstraint(['id_customer'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_session')
    )
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_id_customer'), 'user_sessions', ['id_customer'], unique=False)
    op.create_table('order_items',
    sa.Column('id_item', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_order', sa.Integer(), nullable=False),
    sa.Column('id_product', sa.Integer(), nullable=True),
    sa.Column('product_name', sa.String(), nullable=False),
    sa.Column('product_price_rub', sa.Float(), nullable=False),
    sa.Column('size', sa.String(), nullable=True),
    sa.Column('color', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('subtotal', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['id_order'], ['orders.id_order'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_product'], ['products.id_product'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id_item')
    )
    op.create_index(op.f('ix_order_items_id_order'), 'order_items', ['id_order'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_order_items_id_order'), table_name='order_items')
    op.drop_table('order_items')
    op.drop_index(op.f('ix_user_sessions_id_customer'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_orders_status'), table_name='orders')
    op.drop_index(op.f('ix_orders_payment_status'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_date'), table_name='orders')
    op.drop_index(op.f('ix_orders_id_customer'), table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_cart_id_customer'), table_name='cart')
    op.drop_table('cart')
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('suppliers')
    op.drop_index(op.f('ix_products_taobao_item_id'), table_name='products')
    op.drop_index(op.f('ix_products_name'), table_name='products')
    op.drop_index(op.f('ix_products_category'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_exchange_rates_recorded_at'), table_name='exchange_rates')
    op.drop_table('exchange_rates')
    op.drop_table('analytics')
    # ### end Alembic commands ###
