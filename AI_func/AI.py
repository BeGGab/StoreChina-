import telebot
from telebot import types
import json
import requests
import random
from datetime import datetime
import time

bot = telebot.TeleBot('8127036562:AAHDyx_ygbhVOTXrQcAqRlifYStmb1vDLMA')

# Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
MOCK_PRODUCTS = [
    {
        'id': 1,
        'name': '–£–º–Ω—ã–µ —á–∞—Å—ã SmartWatch Pro',
        'price': 1250,
        'image': 'https://via.placeholder.com/300x300/4A90E2/white?text=SmartWatch',
        'rating': 4.8,
        'sales': 12500,
        'store': 'Official Store'
    },
    {
        'id': 2,
        'name': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏',
        'price': 890,
        'image': 'https://via.placeholder.com/300x300/50C878/white?text=Headphones',
        'rating': 4.6,
        'sales': 8900,
        'store': 'TechGadgets'
    },
    {
        'id': 3,
        'name': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞',
        'price': 670,
        'image': 'https://via.placeholder.com/300x300/FF6B6B/white?text=Speaker',
        'rating': 4.5,
        'sales': 5600,
        'store': 'AudioPro'
    },
    {
        'id': 4,
        'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Xiaomi',
        'price': 15400,
        'image': 'https://via.placeholder.com/300x300/FFA500/white?text=Xiaomi',
        'rating': 4.7,
        'sales': 23400,
        'store': 'Xiaomi Official'
    },
    {
        'id': 5,
        'name': '–ù–æ—É—Ç–±—É–∫ –∏–≥—Ä–æ–≤–æ–π',
        'price': 45600,
        'image': 'https://via.placeholder.com/300x300/9370DB/white?text=Laptop',
        'rating': 4.9,
        'sales': 1200,
        'store': 'GamingTech'
    },
    {
        'id': 6,
        'name': '–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç',
        'price': 560,
        'image': 'https://via.placeholder.com/300x300/20B2AA/white?text=Fitness',
        'rating': 4.4,
        'sales': 8900,
        'store': 'HealthCare'
    }
]

user_carts = {}


class AIProductSearch:
    @staticmethod
    def search_products(query):
        """–ò–º–∏—Ç–∞—Ü–∏—è AI –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        query = query.lower()
        filtered_products = [
            p for p in MOCK_PRODUCTS
            if query in p['name'].lower() or query in p['store'].lower()
        ]

        if not filtered_products:
            filtered_products = random.sample(MOCK_PRODUCTS, min(4, len(MOCK_PRODUCTS)))

        return filtered_products


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'))
    markup.add(types.KeyboardButton('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤'))
    markup.add(types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞'))

    bot.send_message(
        message.chat.id,
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Taobao Assistant!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Taobao —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')
def open_marketplace(message):
    markup = types.InlineKeyboardMarkup()
    web_app_btn = types.InlineKeyboardButton(
        text='üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        web_app=types.WebAppInfo(url='https://beggab.github.io/StoreChina-/')
    )
    markup.add(web_app_btn)

    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å AI –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤')
def search_products(message):
    msg = bot.send_message(message.chat.id, "üîç –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ –Ω–∞ Taobao?")
    bot.register_next_step_handler(msg, process_search_query)


def process_search_query(message):
    query = message.text.strip()
    if not query:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    bot.send_chat_action(message.chat.id, 'typing')

    # –ò–º–∏—Ç–∞—Ü–∏—è AI –ø–æ–∏—Å–∫–∞
    products = AIProductSearch.search_products(query)

    if not products:
        bot.send_message(message.chat.id, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for i, product in enumerate(products):
        if i % 2 == 0 and i + 1 < len(products):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            send_product_pair_safe(message.chat.id, products[i], products[i + 1])
        elif i % 2 == 0:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä
            send_single_product(message.chat.id, products[i])

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        time.sleep(0.5)


def send_product_pair_safe(chat_id, product1, product2):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ media_group"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        photo_msg1 = bot.send_photo(chat_id, product1['image'])

        # –ó–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
        photo_msg2 = bot.send_photo(chat_id, product2['image'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        caption = (
            f"üõçÔ∏è **{product1['name']}**\n"
            f"üí∞ {product1['price']}‚ÇΩ ‚Ä¢ ‚≠ê {product1['rating']}\n"
            f"üè™ {product1['store']}\n\n"
            f"üõçÔ∏è **{product2['name']}**\n"
            f"üí∞ {product2['price']}‚ÇΩ ‚Ä¢ ‚≠ê {product2['rating']}\n"
            f"üè™ {product2['store']}"
        )

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(
            f"üõí {product1['price']}‚ÇΩ",
            callback_data=f"add_{product1['id']}"
        )
        btn2 = types.InlineKeyboardButton(
            f"üõí {product2['price']}‚ÇΩ",
            callback_data=f"add_{product2['id']}"
        )
        markup.row(btn1, btn2)

        bot.send_message(chat_id, caption, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        send_single_product(chat_id, product1)
        send_single_product(chat_id, product2)


def send_single_product(chat_id, product):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(
            f"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É - {product['price']}‚ÇΩ",
            callback_data=f"add_{product['id']}"
        )
        markup.add(btn)

        caption = (
            f"üõçÔ∏è **{product['name']}**\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']}\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product['sales']} —à—Ç.\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {product['store']}"
        )

        bot.send_photo(chat_id, product['image'], caption=caption,
                       parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        caption = (
            f"üõçÔ∏è **{product['name']}**\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {product['rating']}\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product['sales']} —à—Ç.\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {product['store']}\n"
            f"üì∏ –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        )

        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(
            f"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É - {product['price']}‚ÇΩ",
            callback_data=f"add_{product['id']}"
        )
        markup.add(btn)

        bot.send_message(chat_id, caption, parse_mode='Markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
def add_to_cart(call):
    try:
        product_id = int(call.data.split('_')[1])
        user_id = call.from_user.id

        product = next((p for p in MOCK_PRODUCTS if p['id'] == product_id), None)

        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if user_id not in user_carts:
            user_carts[user_id] = []

        user_carts[user_id].append(product)

        bot.answer_callback_query(call.id, f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")


@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
def show_cart(message):
    try:
        user_id = message.from_user.id

        if user_id not in user_carts or not user_carts[user_id]:
            bot.send_message(message.chat.id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        cart = user_carts[user_id]
        total = sum(item['price'] for item in cart)

        cart_text = "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
        for i, item in enumerate(cart, 1):
            cart_text += f"{i}. {item['name']} - {item['price']}‚ÇΩ\n"

        cart_text += f"\nüíµ **–ò—Ç–æ–≥–æ: {total}‚ÇΩ**"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))

        bot.send_message(message.chat.id, cart_text, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")


@bot.callback_query_handler(func=lambda call: call.data == 'checkout')
def checkout(call):
    try:
        user_id = call.from_user.id

        if user_id not in user_carts or not user_carts[user_id]:
            bot.answer_callback_query(call.id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        total = sum(item['price'] for item in user_carts[user_id])

        bot.send_message(
            call.message.chat.id,
            f"üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üíµ –°—É–º–º–∞: {total}‚ÇΩ\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(user_carts[user_id])}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è"
        )

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        user_carts[user_id] = []

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


@bot.callback_query_handler(func=lambda call: call.data == 'clear_cart')
def clear_cart(call):
    try:
        user_id = call.from_user.id

        if user_id in user_carts:
            user_carts[user_id] = []

        bot.answer_callback_query(call.id, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        bot.edit_message_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", call.message.chat.id, call.message.message_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ **AI Taobao Assistant - –ü–æ–º–æ—â—å**

üõçÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- AI –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Taobao
- –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
- –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å

üéØ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"
2. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ
3. –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
4. –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
5. –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑!
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")


if __name__ == '__main__':
    print("ü§ñ AI Taobao Bot –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True, skip_pending=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
