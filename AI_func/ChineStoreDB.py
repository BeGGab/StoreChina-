# bot.py
import telebot
from telebot import types
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π)
TOKEN = '8127036562:AAHDyx_ygbhVOTXrQcAqRlifYStmb1vDLMA'
ADMIN_ID = 1707332723

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
import database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if __name__ == '__main__':
    database.init_db()


# =============================================
# –§–£–ù–ö–¶–ò–ò
# =============================================

def send_admin_notification(user_info, order_data, order_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    try:
        name = user_info.get('name') or user_info.get('first_name') or '–ö–ª–∏–µ–Ω—Ç'
        message = f"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó! #{order_id}\n\n"
        message += f"üë§ {name}\n"
        if user_info.get('phone'):
            message += f"üìû {user_info['phone']}\n"
        if user_info.get('address'):
            message += f"üè† {user_info['address']}\n"
        message += f"üÜî {user_info['id']}\n"
        if user_info.get('username'):
            message += f"‚Ä¢ @{user_info['username']}\n"

        message += f"\nüì¶ –°—É–º–º–∞: {order_data['total']}‚ÇΩ ({len(order_data['items'])} —à—Ç)\n"
        message += "üìã –°–æ—Å—Ç–∞–≤:\n"
        for i, item in enumerate(order_data['items'], 1):
            qty = item.get('quantity', 1)
            message += f"{i}. {item['name']} - {item['price']}‚ÇΩ x{qty}\n"

        bot.send_message(ADMIN_ID, message)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)


# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================

@bot.message_handler(commands=['start'])
def start(message):
    logger.info("/start –æ—Ç %s", message.from_user.id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ Telegram-–¥–∞–Ω–Ω—ã–µ)
    database.register_or_update_customer(
        telegram_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'))

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Taobao Assistant!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')
def open_marketplace(message):
    logger.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ %s", message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    web_app = types.WebAppInfo(url='https://beggab.github.io/StoreChina-/')
    button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app=web_app)
    markup.add(button)

    bot.send_message(
        message.chat.id,
        "üõí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=markup
    )


@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        logger.info("WEB_APP_DATA –æ—Ç %s", message.from_user.id)
        logger.info("Raw data: %s", message.web_app_data.data)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        try:
            data = json.loads(message.web_app_data.data)
        except json.JSONDecodeError:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return

        if not isinstance(data, dict) or data.get('action') != 'checkout':
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
            return

        user_data = data.get('user', {})
        try:
            total = float(data.get('total', 0))
        except (TypeError, ValueError):
            total = 0.0
        items = data.get('items', [])
        if not items:
            bot.send_message(message.chat.id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram
        telegram_user_info = {
            'id': message.from_user.id,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            'username': message.from_user.username
        }
        full_user_info = {**telegram_user_info, **user_data}

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–º—è
        if not full_user_info.get('name'):
            full_user_info['name'] = full_user_info.get('first_name') or '–ö–ª–∏–µ–Ω—Ç'

        order_data = {
            'items': items,
            'total': round(total, 2),
            'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å)
        order_id = database.save_order(full_user_info, order_data)
        if not order_id:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        send_admin_notification(full_user_info, order_data, order_id)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üíµ –°—É–º–º–∞: {total}‚ÇΩ\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(items)}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp: %s", e)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")


@bot.message_handler(commands=['orders'])
def show_orders(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    orders = database.get_recent_orders(10)
    if not orders:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for o in orders:
        addr = (o.get('delivery_address') or '–ù–µ —É–∫–∞–∑–∞–Ω')[:30]
        text += (
            f"#{o['id_order']} | {o['total_amount_rub']}‚ÇΩ | {o['order_date']}\n"
            f"üë§ {o['full_name']} | üìû {o.get('phone', '–Ω–µ—Ç')}\n"
            f"üìç {addr}...\n"
            f"üìä {o['status']}\n"
            "‚ûñ‚ûñ‚ûñ\n"
        )
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['status'])
def status(message):
    stats = database.get_stats()
    info = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders']}\n"
        f"üïí {datetime.now().strftime('%H:%M:%S')}"
    )
    bot.send_message(message.chat.id, info)


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ AI Taobao Assistant - –ü–æ–º–æ—â—å

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å
/orders - –ó–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)
    """
    bot.send_message(message.chat.id, help_text)


# =============================================
# –ó–ê–ü–£–°–ö
# =============================================

if __name__ == '__main__':
    logger.info("=" * 50)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("–ê–¥–º–∏–Ω ID: %s", ADMIN_ID)
    logger.info("=" * 50)

    try:
        bot.polling(none_stop=True, interval=1, timeout=30)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞: %s", e)
