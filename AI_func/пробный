import telebot
from telebot import types
import json
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('8127036562:AAHDyx_ygbhVOTXrQcAqRlifYStmb1vDLMA')
ADMIN_ID = 1707332723
ORDERS_FILE = 'orders.json'


def save_order(order_data):
    try:
        orders = load_orders()
        orders.append(order_data)
        with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(orders, f, ensure_ascii=False, indent=2)
        logger.info("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", order_data['order_data']['total'])
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %s", e)


def load_orders():
    try:
        if os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except:
        return []


def send_admin_notification(user_info, order_data):
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É %s", ADMIN_ID)

        message = (
            "–ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
            "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n"
        )

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"‚Ä¢ –ò–º—è: {user_info.get('name', user_info.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        if user_info.get('last_name'):
            message += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user_info['last_name']}\n"
        message += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_info.get('email'):
            message += f"‚Ä¢ Email: {user_info['email']}\n"
        if user_info.get('address'):
            message += f"‚Ä¢ –ê–¥—Ä–µ—Å: {user_info['address']}\n"

        # Telegram –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"‚Ä¢ Telegram ID: {user_info['id']}\n"
        if user_info.get('username'):
            message += f"‚Ä¢ @{user_info['username']}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        message += f"\n–ó–∞–∫–∞–∑:\n"
        message += f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(order_data['items'])}\n"
        message += f"‚Ä¢ –°—É–º–º–∞: {order_data['total']}‚ÇΩ\n"
        message += f"‚Ä¢ –í—Ä–µ–º—è: {order_data['timestamp']}\n\n"

        message += "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        for i, item in enumerate(order_data['items'], 1):
            message += f"{i}. {item['name']} - {item['price']}‚ÇΩ\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        bot.send_message(ADMIN_ID, message)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        full_order_data = {
            'user_info': user_info,
            'order_data': order_data,
            'date': datetime.now().isoformat()
        }
        save_order(full_order_data)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)


@bot.message_handler(commands=['start'])
def start(message):
    logger.info("/start –æ—Ç %s", message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'))

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Taobao Assistant!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å')
def open_marketplace(message):
    logger.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ %s", message.from_user.id)

    markup = types.InlineKeyboardMarkup()
    web_app = types.WebAppInfo(url='https://beggab.github.io/StoreChina-/')
    button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app=web_app)
    markup.add(button)

    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=markup
    )


@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    try:
        logger.info("WEB_APP_DATA –æ—Ç %s", message.from_user.id)
        logger.info("Raw data: %s", message.web_app_data.data)

        data = json.loads(message.web_app_data.data)
        logger.info("Parsed data: %s", data)

        if data.get('action') == 'checkout':
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
            user_data = data.get('user', {})
            total = data.get('total', 0)
            items = data.get('items', [])

            logger.info("–ó–∞–∫–∞–∑: %s —Ç–æ–≤–∞—Ä–æ–≤, %s —Ä—É–±", len(items), total)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            telegram_user_info = {
                'id': message.from_user.id,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'username': message.from_user.username
            }

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            full_user_info = {**telegram_user_info, **user_data}

            order_data = {
                'items': items,
                'total': total,
                'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S')
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            send_admin_notification(full_user_info, order_data)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"üíµ –°—É–º–º–∞: {total}‚ÇΩ\n"
                f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(items)}\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
            )

            logger.info("–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ–±—Ä–∞–±–æ—Ç–∞–Ω", message.from_user.id)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: %s", e)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")


@bot.message_handler(commands=['orders'])
def show_orders(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    orders = load_orders()
    if not orders:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    bot.send_message(message.chat.id, f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")

    for i, order in enumerate(orders[-5:], 1):
        user = order['user_info']
        order_data = order['order_data']

        order_text = (
            f"–ó–∞–∫–∞–∑ #{i}\n"
            f"üë§ {user.get('name', user.get('first_name', '–ö–ª–∏–µ–Ω—Ç'))}\n"
            f"üìû {user.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üíµ {order_data['total']}‚ÇΩ\n"
            f"üïê {order_data['timestamp']}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        )

        bot.send_message(message.chat.id, order_text)


@bot.message_handler(commands=['order'])
def order_detail(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        orders = load_orders()
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
        last_order = orders[-1]
        user = last_order['user_info']
        order_data = last_order['order_data']

        detail_text = (
            "üì¶ –ü–û–°–õ–ï–î–ù–ò–ô –ó–ê–ö–ê–ó\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.get('name', user.get('first_name', '–ö–ª–∏–µ–Ω—Ç'))}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )

        if user.get('email'):
            detail_text += f"üìß Email: {user['email']}\n"
        if user.get('address'):
            detail_text += f"üè† –ê–¥—Ä–µ—Å: {user['address']}\n"

        detail_text += (
            f"üÜî TG ID: {user['id']}\n"
            f"üìû @{user.get('username', '–Ω–µ—Ç')}\n\n"
            f"üíµ –°—É–º–º–∞: {order_data['total']}‚ÇΩ\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(order_data['items'])}\n"
            f"üïê –í—Ä–µ–º—è: {order_data['timestamp']}\n\n"
            "üìã –°–æ—Å—Ç–∞–≤:\n"
        )

        for item in order_data['items']:
            detail_text += f"‚Ä¢ {item['name']} - {item['price']}‚ÇΩ\n"

        bot.send_message(message.chat.id, detail_text)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['status'])
def status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    orders = load_orders()
    info = (
        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}\n"
        f"üë§ –í–∞—à ID: {message.from_user.id}\n"
        f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    )
    bot.send_message(message.chat.id, info)


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ AI Taobao Assistant - –ü–æ–º–æ—â—å

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)
/order - –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω)

üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
3. –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑
"""
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['clear'])
def clear_orders(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        if os.path.exists(ORDERS_FILE):
            os.remove(ORDERS_FILE)
            bot.send_message(message.chat.id, "‚úÖ –ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—á–∏—â–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "üì≠ –ë–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    logger.info("=" * 50)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("–ê–¥–º–∏–Ω ID: %s", ADMIN_ID)
    logger.info("=" * 50)

    try:
        bot.polling(none_stop=True, interval=1, timeout=30)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞: %s", e)
